Commandes pour initialiser chaque service : 

npm init -y
npm install fastify
npm install typescript --save-dev
npm install better-sqlite3
npm install --save @types/better-sqlite3
npm i @fastify/jwt

AUTH-SERVICE
npm install uuid 
npm install validator
npm i --save-dev @types/validator
npm install bcrypt
npm i --save-dev @types/bcrypt
npm i @fastify/cookie
npm i @fastify/jwt
npm i resend


Génération clé JWT : openssl rand -base64 48

    | Code    | Nom                   | Quand l’utiliser                                                        |
| ------- | --------------------- | ----------------------------------------------------------------------- |
| **200** | OK                    | ✅ Requête réussie avec une **réponse (JSON, HTML, etc.)**               |
| **201** | Created               | ✅ Une **ressource vient d’être créée** (ex: POST `/register`)           |
| **204** | No Content            | ✅ Action réussie **sans corps de réponse** (ex: DELETE)                 |
| **400** | Bad Request           | ❌ Requête invalide (ex: champ manquant, email mal formé)                |
| **401** | Unauthorized          | ❌ L’utilisateur n’est **pas authentifié**                               |
| **403** | Forbidden             | ❌ L’utilisateur est **authentifié mais n’a pas les droits**             |
| **404** | Not Found             | ❌ Ressource inexistante (ex: utilisateur introuvable)                   |
| **409** | Conflict              | ❌ Conflit de données (ex: email déjà utilisé)                           |
| **422** | Unprocessable Entity  | ❌ Données valides mais sémantiquement incorrectes (ex: password faible) |
| **500** | Internal Server Error | ❌ Erreur interne du serveur (bug, crash inattendu)                      |


    const user = await getUser(loginData.userId);
    console.log('user = ', user);
    setLoggedInUser(user);
    document.getElementById('view-login').style.display = 'none';
    document.getElementById('logLogin').textContent = '';